generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String    @unique
  password         String
  phoneNumber      String?
  address          String?
  birthDate        DateTime?
  gender           Gender?
  role             Role
  profilePicture   String?
  referralCode     String?   @unique
  referredBy       Int?
  point            Int       @default(0)
  pointExpiredDate DateTime?
  isDeleted        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  notification Notification[]
  coupon       Coupon[]
  voucher      Voucher[]
  event        Event[]
  review       Review[]
  transaction  Transaction[]
  usedVouchers Voucher[]      @relation("UsedVouchers")

  referredByUser User? @relation("UserReferrals", fields: [referredBy], references: [id])

  referrals User[] @relation("UserReferrals")

  @@map("users")
}

enum Role {
  USER
  ORGANIZER
}

enum Gender {
  Male
  Female
}

model Notification {
  id      Int     @id @default(autoincrement())
  userId  Int
  message String
  isView  Boolean @default(false)
  user    User    @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Coupon {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  value      Int
  couponCode String
  isUsed     Boolean  @default(false)
  createdAt  DateTime @default(now())
  expiredAt  DateTime

  @@map("coupons")
}

model Voucher {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  usedByUserId Int?
  usedByUser   User?    @relation("UsedVouchers", fields: [usedByUserId], references: [id])
  voucherCode  String
  qty          Int
  usedQty      Int      @default(0)
  value        Int
  eventId      Int
  createdAt    DateTime @default(now())
  expDate      DateTime

  event       Event         @relation(fields: [eventId], references: [id])
  transaction Transaction[]

  @@map("vouchers")
}

model Event {
  id            Int       @id @default(autoincrement())
  title         String
  thumbnail     String
  address       String
  userId        Int
  category      String
  price         Int?
  availableSeat Int
  content       String    @db.Text()
  user          User      @relation(fields: [userId], references: [id])
  startTime     DateTime
  endTime       DateTime
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  Voucher       Voucher[]

  @@map("events")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  eventId   Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@map("reviews")
}

model Transaction {
  id            Int      @id @default(autoincrement())
  eventTicketId Int
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  voucherId     Int?
  voucher       Voucher? @relation(fields: [voucherId], references: [id])

  totalPrice   Float
  pointUse     Int
  paymentProof String?
  status       Status
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("transactions")
}

enum Status {
  waitingPayment
  waitingConfirmation
  done
  rejected
  expired
  cancelled
}

model EventTicket {
  id            Int      @id @default(autoincrement())
  eventId       Int
  type          Type
  price         Float
  availableseat Int
  sold          Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("event_tickets")
}

enum Type {
  VVIP
  VIP
  REGULER
}
